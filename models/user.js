// const e = require('express');
const db = require('../util/database');

/**
 * Module for user-related utilities.
 * @module models/user
 */

/**
 * User class
 * @class This is a User class representing a user of the website.
 */
module.exports = class User {
    /**
     * Create a user.
     * @param {string} id - The id of the user randomly generated by UUID npm library.
     * @param {string} email - The email of the user.
     * @param {string} password - The password of the user account.
     * @param {string} profession - The profession of the user.
     * @param {number} experience - The number of years of user's job experience.
     * @param {string} interests - The subjects of user's interests.
     * @param {string} events - The event(s) the user saved on their account.
     */
    constructor(id, email, password, proffession, experience, interests, events) {
        this.id = id;
        this.email = email;
        // TODO: hash
        this.password = password;
        this.proffesion = proffession;
        this.experience = experience;
        this.interests = interests;
        this.events = events;
    }

    /**
     * Fetch a user from the database using user email.
     * @param {string} email - The email of a user to find.
     * @param {Object} database - The database object for database connection.
     * @return {Array} The result set of selected user records.
     */
    static fetchUser(email, database) {
        return database.execute('SELECT * FROM users WHERE email = ?', [email]);
    }

    /**
     * Create and save new user into the database.
     * @param {Object} database - The database object for database connection.
     * @return {Array} The result set of inserted user record.
     */
    createUser(database) {
        return database.execute('INSERT INTO users (id, email, password, proffession, experience, interests, events) VALUES (?, ?, ?, ?, ?, ?, ?)',
            [this.id, this.email, this.password, this.proffession, this.experience, this.interests, this.events]);
    }

    /**
     * Fetch a user from the database using user ID.
     * @param {string} id - The ID of a user to find.
     * @param {Object} database - The database object for database connection.
     * @return {Array} The result set of selected user records.
     */
    static fetchUserById(id, database) {
        return database.execute('SELECT * FROM users WHERE users.id = ?', [id]);
    }

    /**
     * Update a user with new user information.
     * @return {Array} The result set of updated user record.
     */
    saveUser() {
        return db.execute('UPDATE users SET email = ?, password = ?, proffession = ?, experience = ?, interests = ? WHERE users.id = ?',
            [this.email, this.password, this.proffession, this.experience, this.interests, this.id]);
    }

    /**
     * Fetch a user from the database using user ID.
     * @param {string} id - The ID of a user to find.
     * @param {Array} event - The list of events user saved to their account.
     * @return {Array} The result set of updated user record.
     */
    static updateUserEvents(id, event) {
        return db.execute('UPDATE users SET events = ? WHERE users.id = ?', [event, id]);
    }

}